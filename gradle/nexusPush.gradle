/*
 * Copyright 2014. ItudeMobile
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}



def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}


// Android JavaDocs
android.libraryVariants.all { variant ->
    task("${variant.name}Javadoc", type: Javadoc) {

        destinationDir = new File("$project.buildDir/javadoc/$variant.name")

        source = variant.javaCompile.source
        exclude '**/BuildConfig.java'
        exclude '**/R.java'

        ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
        classpath = files(variant.javaCompile.classpath.files) + files(ext.androidJar)

        options {
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            links("http://docs.oracle.com/javase/7/docs/api/");
            setMemberLevel(JavadocMemberLevel.PACKAGE)
            docEncoding = 'UTF-8'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
        }

    }

    task("${variant.name}JavadocJar", type: Jar, dependsOn: "${variant.name}Javadoc") {
        classifier 'javadoc'
        destinationDir = new File("$project.buildDir/libs/")
        from "$project.buildDir/javadoc/$variant.name"
    }

    task("${variant.name}SourcesJar", type: Jar) {
        classifier 'sources'

        destinationDir = new File("$project.buildDir/libs/")

        from variant.javaCompile.source
        exclude '**/BuildConfig.java'
        exclude '**/R.java'
    }
}


project.afterEvaluate {
    artifacts {
        archives releaseJavadocJar
        archives releaseSourcesJar
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.artifactId = POM_ARTIFACT_ID
                pom.version = VERSION_NAME

                repository(url: getReleaseRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                snapshotRepository(url: getSnapshotRepositoryUrl()) {
                    authentication(userName: getRepositoryUsername(), password: getRepositoryPassword())
                }

                pom.project {
                    inceptionYear '2015'
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL

                    scm {
                        url POM_SCM_URL
                        connection POM_SCM_CONNECTION
                        developerConnection POM_SCM_DEV_CONNECTION
                    }

                    licenses {
                        license {
                            name POM_LICENSE_NAME
                            url POM_LICENSE_URL
                            distribution POM_LICENSE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }
}

